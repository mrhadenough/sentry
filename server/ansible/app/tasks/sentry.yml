- name: Create sentry folder
  file: path=/www/sentry state=directory owner=root group=root

- name: copy docker compose
  template: src=docker-compose.yml dest=/www/sentry/docker-compose.yml

- name: copy docker compose
  template: src=.env.j2 dest=/www/sentry/.env

- name: Generate secret key
  shell: docker run --rm sentry config generate-secret-key
  args:
    chdir: /www/sentry/
  register: secret_key
  run_once: true

- name: Write secret key to env
  replace:
    path: /www/sentry/.env
    regexp: "^SENTRY_SECRET_KEY=$"
    replace: "SENTRY_SECRET_KEY={{ secret_key.stdout }}"

- name: Stop compose
  docker_service:
    project_name: sentry
    project_src: /www/sentry
    state: absent

- name: Upgrade sentry
  shell: docker-compose run --rm sentry sentry upgrade --noinput
  args:
    chdir: /www/sentry
  run_once: true
  retries: 10
  delay: 1

- name: Run compose
  docker_service:
    project_name: sentry
    project_src: /www/sentry
    state: present
  register: output

- name: Check runned containers
  command: docker-compose ps
  args:
    chdir: /www/sentry
  register: output

- debug: msg="{{ output.stdout.split('\n') }}"

- name: Check if user exists
  shell: docker exec -i sentry_postgres_1 psql -U {{ postgres_user }} -c "select email from auth_user where email = '{{ sentry_user_email }}'"
  args:
    chdir: /www/sentry
  register: create_email

- debug: msg="{{ create_email.stdout | quote }}"

- name: Create sentry user
  shell: docker-compose run sentry createuser --email {{ sentry_user_email }} --password {{ sentry_user_password }} --superuser
  args:
    chdir: /www/sentry
  ignore_errors: yes
  when: create_email.stdout_lines[-1] != '(1 row)'
